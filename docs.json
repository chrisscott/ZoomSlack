[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "ZoomSlack:start()",
        "desc": "Start ZoomSlack",
        "doc": "Start ZoomSlack\n\nParameters:\n * None\n\nReturns:\n * None",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "ZoomSlack:start()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "ZoomSlack.dryRun",
        "desc": "When set to true, don't send messages to the Slack API and don't send notifications. Defaults to false.",
        "doc": "When set to true, don't send messages to the Slack API and don't send notifications. Defaults to false.",
        "name": "dryRun",
        "signature": "ZoomSlack.dryRun",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ZoomSlack.expiration",
        "desc": "String indicating how long until the status expires. Default is \"N\" (Never). Status will always be cleared when a meeting is stopped so this is more insurance than anything if set. Valid expiration times: \"N\", \"30M\", \"45M\", and \"1H\"",
        "doc": "String indicating how long until the status expires. Default is \"N\" (Never). Status will always be cleared when a meeting is stopped so this is more insurance than anything if set. Valid expiration times: \"N\", \"30M\", \"45M\", and \"1H\"",
        "name": "expiration",
        "signature": "ZoomSlack.expiration",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ZoomSlack.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "ZoomSlack.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ZoomSlack.slackToken",
        "desc": "String Slack token. Uses a [legacy token](https://api.slack.com/custom-integrations/legacy-tokens)",
        "doc": "String Slack token. Uses a [legacy token](https://api.slack.com/custom-integrations/legacy-tokens)",
        "name": "slackToken",
        "signature": "ZoomSlack.slackToken",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ZoomSlack.statusEmoji",
        "desc": "String Status emoji. Defaults to \":spiral_calendar_pad:\" if not set.",
        "doc": "String Status emoji. Defaults to \":spiral_calendar_pad:\" if not set.",
        "name": "statusEmoji",
        "signature": "ZoomSlack.statusEmoji",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ZoomSlack.statusText",
        "desc": "String Status text. Defaults to \"On a Call\" if not set.",
        "doc": "String Status text. Defaults to \"On a Call\" if not set.",
        "name": "statusText",
        "signature": "ZoomSlack.statusText",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Set your Slack status when in a Zoom meeting. Clear it when you're done.",
    "doc": "Set your Slack status when in a Zoom meeting. Clear it when you're done.\n\nYou'll need to use a [legacy token](https://api.slack.com/custom-integrations/legacy-tokens)\nand pass it in to the configuration along with any other configuration options. e.g.:\n\n```\nlocal zoom = hs.spoons.use(\n  \"ZoomSlack\", \n  {\n    config = { \n      slackToken = \"[YOUR SLACK TOKEN]\",\n      statusEmoji = \":zoom:\"\n    }\n  }\n)\nif zoom then\n  spoon.ZoomSlack:start()\nend\n```\n\nhttps://github.com/chrisscott",
    "items": [
      {
        "def": "ZoomSlack.dryRun",
        "desc": "When set to true, don't send messages to the Slack API and don't send notifications. Defaults to false.",
        "doc": "When set to true, don't send messages to the Slack API and don't send notifications. Defaults to false.",
        "name": "dryRun",
        "signature": "ZoomSlack.dryRun",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ZoomSlack.expiration",
        "desc": "String indicating how long until the status expires. Default is \"N\" (Never). Status will always be cleared when a meeting is stopped so this is more insurance than anything if set. Valid expiration times: \"N\", \"30M\", \"45M\", and \"1H\"",
        "doc": "String indicating how long until the status expires. Default is \"N\" (Never). Status will always be cleared when a meeting is stopped so this is more insurance than anything if set. Valid expiration times: \"N\", \"30M\", \"45M\", and \"1H\"",
        "name": "expiration",
        "signature": "ZoomSlack.expiration",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ZoomSlack.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log level for the messages coming from the Spoon.",
        "name": "logger",
        "signature": "ZoomSlack.logger",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ZoomSlack.slackToken",
        "desc": "String Slack token. Uses a [legacy token](https://api.slack.com/custom-integrations/legacy-tokens)",
        "doc": "String Slack token. Uses a [legacy token](https://api.slack.com/custom-integrations/legacy-tokens)",
        "name": "slackToken",
        "signature": "ZoomSlack.slackToken",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ZoomSlack:start()",
        "desc": "Start ZoomSlack",
        "doc": "Start ZoomSlack\n\nParameters:\n * None\n\nReturns:\n * None",
        "name": "start",
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "ZoomSlack:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "ZoomSlack.statusEmoji",
        "desc": "String Status emoji. Defaults to \":spiral_calendar_pad:\" if not set.",
        "doc": "String Status emoji. Defaults to \":spiral_calendar_pad:\" if not set.",
        "name": "statusEmoji",
        "signature": "ZoomSlack.statusEmoji",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "ZoomSlack.statusText",
        "desc": "String Status text. Defaults to \"On a Call\" if not set.",
        "doc": "String Status text. Defaults to \"On a Call\" if not set.",
        "name": "statusText",
        "signature": "ZoomSlack.statusText",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "ZoomSlack",
    "stripped_doc": "\nYou'll need to use a [legacy token](https://api.slack.com/custom-integrations/legacy-tokens)\nand pass it in to the configuration along with any other configuration options. e.g.:\n\n```\nlocal zoom = hs.spoons.use(\n  \"ZoomSlack\", \n  {\n    config = { \n      slackToken = \"[YOUR SLACK TOKEN]\",\n      statusEmoji = \":zoom:\"\n    }\n  }\n)\nif zoom then\n  spoon.ZoomSlack:start()\nend\n```\n\nhttps://github.com/chrisscott",
    "submodules": [],
    "type": "Module"
  }
]